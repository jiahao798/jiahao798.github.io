<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java动态代理</title>
      <link href="/2025/05/21/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2025/05/21/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="程序为什么需要代理？代理长什么样？"><a href="#程序为什么需要代理？代理长什么样？" class="headerlink" title="程序为什么需要代理？代理长什么样？"></a>程序为什么需要代理？代理长什么样？</h2><img src="/2025/05/21/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/image-20250521195717292.png" alt="动态代理" style="zoom:50%;"><p>对象如果嫌身上干的事太多的话，可以通过代理来转移部分职责。</p><p>对象有什么方法想被代理，代理就一定要有对应的方法。</p><h2 id="接下来我们可以实现一下代理"><a href="#接下来我们可以实现一下代理" class="headerlink" title="接下来我们可以实现一下代理"></a>接下来我们可以实现一下代理</h2><p>先创建一个BigStar类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigStar</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BigStar</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sing</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;唱了一首&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;谢谢！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;跳了一支&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类中我们定义了sing和dance两个方法，然后我们再创建一个Star接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    String <span class="title function_">sing</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口中声明了两个方法，我们在BigStar类中实现的两个方法，所以可以将代码修改为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigStar</span> <span class="keyword">implements</span> <span class="title class_">Star</span></span><br></pre></td></tr></table></figure><p>我们需要通过代理来实现这个接口，所以我们为其创建一个类来实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Star <span class="title function_">creatProxy</span><span class="params">(BigStar bigStar)</span>&#123;</span><br><span class="line">        <span class="comment">/*newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">                Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">                InvocationHandler h)</span></span><br><span class="line"><span class="comment">                参数1：用于指定一个类加载器</span></span><br><span class="line"><span class="comment">                参数2：指定生成的代理长什么样子，也就是有哪些方法</span></span><br><span class="line"><span class="comment">                参数3：用来指定生成的代理对象要干什么事</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">        <span class="type">Star</span> <span class="variable">starProxy</span> <span class="operator">=</span> (Star) Proxy.newProxyInstance(ProxyUtil.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Star.class&#125;, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span> <span class="comment">// 回调方法</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="comment">// 代理要做的事，在这里写逻辑</span></span><br><span class="line">                        <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;sing&quot;</span>))&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;准备话筒，收钱20万&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span> method.invoke(bigStar, args);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;dance&quot;</span>))&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;准备场地，收钱100万&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span> method.invoke(bigStar, args);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> method.invoke(bigStar, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> starProxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上方的代码中，我们创建了一个代理类ProxyUtil，并创建了一个方法去实现代理对象。</p><p>我们通过java提供的Proxy包中的newProxyInstance方法来创建一个代理对象，该方法需求三个参数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">newProxyInstance(ClassLoader loader,</span><br><span class="line">                Class&lt;?&gt;[] interfaces,</span><br><span class="line">                InvocationHandler h)</span><br></pre></td></tr></table></figure><p>其中ClassLoader是类加载器，就是指定我们创建的类的对象；</p><p>Class&lt;?&gt;[]则是指定我们生成的代理有哪些方法；</p><p>InvocationHandler就是主体的代理逻辑内容，其主要就是invoke方法，包括后续调用代理时也是调用invoke方法；</p><p>invoke方法也包含三个参数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object proxy, Method method, Object[] args</span><br></pre></td></tr></table></figure><p>proxy就是我们要用来实现的对象；</p><p>method就是主要调用的方法函数；</p><p>args就是调用之后的返回值；</p><p>以上就是所有的代理创建过程，我们接下来可以通过测试来验证代理的实现与否。</p><p>创建一个Test类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigStar</span> <span class="variable">bigStar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigStar</span>(<span class="string">&quot;杨超越&quot;</span>);</span><br><span class="line">        <span class="type">Star</span> <span class="variable">star</span> <span class="operator">=</span> ProxyUtil.creatProxy(bigStar);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> star.sing(<span class="string">&quot;好日子&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        star.dance(<span class="string">&quot;社会摇&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在其中实现一个主函数，创建一个BigStar类。</p><p>然后通过java多态的特性创建一个接口代理：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Star</span> <span class="variable">star</span> <span class="operator">=</span> ProxyUtil.creatProxy(bigStar);</span><br></pre></td></tr></table></figure><p>通过调用这个代理的方法，代理会在invoke中实现逻辑，最后的代码测试结果为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">准备话筒，收钱<span class="number">20</span>万</span><br><span class="line">杨超越唱了一首好日子</span><br><span class="line">谢谢！</span><br><span class="line">准备场地，收钱<span class="number">100</span>万</span><br><span class="line">杨超越跳了一支社会摇</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>卡码笔记-邮箱验证码发送</title>
      <link href="/2025/05/03/%E5%8D%A1%E7%A0%81%E7%AC%94%E8%AE%B0-%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%91%E9%80%81/"/>
      <url>/2025/05/03/%E5%8D%A1%E7%A0%81%E7%AC%94%E8%AE%B0-%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="如何通过邮箱发送并接收验证码"><a href="#如何通过邮箱发送并接收验证码" class="headerlink" title="如何通过邮箱发送并接收验证码"></a>如何通过邮箱发送并接收验证码</h1><p>邮箱验证的基本流程：</p><p>1、用户输入邮箱</p><p>2、发送验证码</p><p>3、用户输入验证码</p><p>4、验证并完成注册</p><h2 id="详细流程图"><a href="#详细流程图" class="headerlink" title="详细流程图"></a>详细流程图</h2><img src="/2025/05/03/%E5%8D%A1%E7%A0%81%E7%AC%94%E8%AE%B0-%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%91%E9%80%81/image-20250503191002129.png" class alt="发送邮件"><img src="/2025/05/03/%E5%8D%A1%E7%A0%81%E7%AC%94%E8%AE%B0-%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%91%E9%80%81/image-20250503191044925.png" class alt="校验邮件"><h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `email_verify_code`  (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;邮箱地址&#x27;</span>,</span><br><span class="line">  `code` <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;验证码&#x27;</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">CHARACTER SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;验证码类型：REGISTER-注册，RESET_PASSWORD-重置密码&#x27;</span>,</span><br><span class="line">  `expired_at` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;过期时间&#x27;</span>,</span><br><span class="line">  `created_at` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `used` tinyint(<span class="number">1</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;是否已使用&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `idx_email`(`email` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `idx_code`(`code` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `idx_expired_at`(`expired_at` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="验证码设计哲学"><a href="#验证码设计哲学" class="headerlink" title="验证码设计哲学"></a>验证码设计哲学</h3><p>1、验证码要持久化，需要追踪验证码使用情况，防止验证码重复使用，便于计算验证码发送统计</p><p>2、字段设计：</p><p>​<code>type</code>：区分不同应用场景，如注册和重制密码；</p><p>​<code>expired_at</code>：独立的过期时间字段，不依赖<code>created_at</code>计算；</p><p>​<code>used</code>：显示的使用标记，提升查询性能；</p><p>3、索引设计：</p><p>​<code>idx_email</code> + <code>idx_code</code>：支持验证时的快速查询；</p><p>​<code>idx_expired_at</code>：支持过期数据清理；</p><h3 id="用户表扩展"><a href="#用户表扩展" class="headerlink" title="用户表扩展"></a>用户表扩展</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> <span class="keyword">user</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> email_verified <span class="type">BOOLEAN</span> <span class="keyword">DEFAULT</span> <span class="literal">FALSE</span> COMMENT <span class="string">&#x27;邮箱是否验证&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX idx_email(email);</span><br></pre></td></tr></table></figure><h4 id="用户表升级秘籍"><a href="#用户表升级秘籍" class="headerlink" title="用户表升级秘籍"></a>用户表升级秘籍</h4><p>1、<code>email_verified</code>：标记验证状态，用于控制功能访问权限，区分可信邮箱，统计验证率；</p><p>2、唯一索引确保邮箱不被重复使用，并且提高邮箱查询性能；</p><h2 id="功能实现代码"><a href="#功能实现代码" class="headerlink" title="功能实现代码"></a>功能实现代码</h2><h3 id="验证码的生成与发送"><a href="#验证码的生成与发送" class="headerlink" title="验证码的生成与发送"></a>验证码的生成与发送</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String fromEmail;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;mail.verify-code.expire-minutes&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> expireMinutes;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;mail.verify-code.resend-interval&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> resendInterval;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">sendVerifyCode</span><span class="params">(String email, String type)</span> &#123;</span><br><span class="line">       <span class="comment">// 检查发送频率</span></span><br><span class="line">       <span class="keyword">if</span> (!canSendCode(email)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;发送太频繁，请稍后再试&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 生成6位随机验证码</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">verifyCode</span> <span class="operator">=</span> generateVerifyCode();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 发送邮件</span></span><br><span class="line">           <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">           message.setFrom(fromEmail);</span><br><span class="line">           message.setTo(email);</span><br><span class="line">           message.setSubject(<span class="string">&quot;卡码笔记 - 验证码&quot;</span>);</span><br><span class="line">           message.setText(<span class="string">&quot;您的验证码是：&quot;</span> + verifyCode + <span class="string">&quot;，有效期&quot;</span> + expireMinutes + <span class="string">&quot;分钟，请勿泄露给他人。&quot;</span>);</span><br><span class="line">           mailSender.send(message);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 保存验证码记录</span></span><br><span class="line">           <span class="type">EmailVerifyCode</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmailVerifyCode</span>();</span><br><span class="line">           code.setEmail(email);</span><br><span class="line">           code.setCode(verifyCode);</span><br><span class="line">           code.setType(type);</span><br><span class="line">           code.setExpiredAt(LocalDateTime.now().plusMinutes(expireMinutes));</span><br><span class="line">           emailVerifyCodeMapper.insert(code);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 记录发送时间到Redis</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> <span class="string">&quot;email:verify:limit:&quot;</span> + email;</span><br><span class="line">           redisTemplate.opsForValue().set(redisKey, <span class="string">&quot;1&quot;</span>, resendInterval, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> verifyCode;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           log.error(<span class="string">&quot;发送验证码邮件失败&quot;</span>, e);</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;发送验证码失败，请稍后重试&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>1、频率控制</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录发送时间到Redis</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> <span class="string">&quot;email:verify:limit:&quot;</span> + email;</span><br><span class="line">            redisTemplate.opsForValue().set(redisKey, <span class="string">&quot;1&quot;</span>, resendInterval, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>2、验证码生成</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">generateVerifyCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">code</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        code.append(random.nextInt(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> code.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、邮箱发送</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送邮件</span></span><br><span class="line"><span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">message.setFrom(fromEmail);</span><br><span class="line">message.setTo(email);</span><br><span class="line">message.setSubject(<span class="string">&quot;卡码笔记 - 验证码&quot;</span>);</span><br><span class="line">message.setText(<span class="string">&quot;您的验证码是：&quot;</span> + verifyCode + <span class="string">&quot;，有效期&quot;</span> + expireMinutes + <span class="string">&quot;分钟，请勿泄露给他人。&quot;</span>);</span><br><span class="line">mailSender.send(message);</span><br></pre></td></tr></table></figure><h3 id="验证码校验"><a href="#验证码校验" class="headerlink" title="验证码校验"></a>验证码校验</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verifyCode</span><span class="params">(String email, String code, String type)</span> &#123;</span><br><span class="line">    <span class="comment">// 查询最新的未使用的验证码</span></span><br><span class="line">    <span class="type">EmailVerifyCode</span> <span class="variable">verifyCode</span> <span class="operator">=</span> emailVerifyCodeMapper.findLatestValidCode(email, type);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (verifyCode == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否过期</span></span><br><span class="line">    <span class="keyword">if</span> (verifyCode.getExpiredAt().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查验证码是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (!verifyCode.getCode().equals(code)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记验证码为已使用</span></span><br><span class="line">    emailVerifyCodeMapper.markAsUsed(verifyCode.getId());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、验证码查询</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findLatestValidCode&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kama.notes.model.entity.EmailVerifyCode&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM email_verify_code</span><br><span class="line">    WHERE email = #&#123;email&#125;</span><br><span class="line">    AND type = #&#123;type&#125;</span><br><span class="line">    AND used = FALSE</span><br><span class="line">    AND expired_at &gt; NOW()</span><br><span class="line">    ORDER BY created_at DESC</span><br><span class="line">    LIMIT 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、验证流程</p><p>检查是否存在 -&gt; 验证是否过期 -&gt; 对比验证码 -&gt; 标记已使用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过GitHub+Hexo搭建个人博客</title>
      <link href="/2025/04/28/%E9%80%9A%E8%BF%87GitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/04/28/%E9%80%9A%E8%BF%87GitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="通过GitHub-Hexo搭建个人博客"><a href="#通过GitHub-Hexo搭建个人博客" class="headerlink" title="通过GitHub+Hexo搭建个人博客"></a>通过GitHub+Hexo搭建个人博客</h1><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>GitHub是目前最大的开源代码仓库网站，并且其提供了一项服务Github Pages，这个GitHub Pages可以将我们托管在GitHub上的一个仓库中的html、css和js代码渲染成静态页面。但是，这个仓库也是特殊的，所以每一个 GitHub 账户只能够育一个这样的仓库。将相应的博客内容上传到 GitHub 上之后，我们就可以通过 <code>https://www.username.github.io</code> 来访问自己的博客。</p><p>Hexo 是使用 nodejs 开发的一个快速、简洁、高效的静态博客生成器。Hexo 使用 Markdown 语法解析文章，然后渲染成相应的网页，然后我们将渲染好的网页代码上传到 GitHub 上就可以了。简单来讲，利用 Hexo，我们只需要使用 Markdown 语法写文章，剩下的事情全部交给 Hexo 去做，我们就可以看到想要的博客效果了。</p><p>使用 GitHub Pages 服务搭建博客的好处有：</p><ol><li>全是静态文件，访问速度快；</li><li>免费方便，不用花钱就可以搭建个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名；</li><li>数据绝对安全，基于 GitHub 的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li><li>自己可以随性所欲的设计，美观大气上档次；</li></ol><h2 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h2><p>在开始之前需要做一些准备，由于不可抗力，GitHub经常难以访问，而我们的网站是基于GitHub Pages提供的服务，所以在此之前需要自行解决一下科学上网问题。</p><h3 id="2-1、注册GitHub账号"><a href="#2-1、注册GitHub账号" class="headerlink" title="2.1、注册GitHub账号"></a>2.1、注册GitHub账号</h3><p>进入<a href="https://github.com/">GitHub官网</a>，注册自己的账号，并且记住自己的账号名和邮箱，后面会被用到。</p><h3 id="2-2、安装node-js和npm"><a href="#2-2、安装node-js和npm" class="headerlink" title="2.2、安装node.js和npm"></a>2.2、安装node.js和npm</h3><p>进入<a href="https://nodejs.org/">Node.js官网</a>，下载相应版本。在Windows上安装时务必选择全部组件，包括勾选 <code>Add to Path</code>。<br>注意安装<code>Node.js</code>会包含环境变量及<code>npm</code>的安装，安装后，检测<code>Node.js</code>是否安装成功，在cmd命令行中输入:<br>第一个命令：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>这个命令会在<code>node.js</code>安装成功的情况下显示<code>node.js</code>的版本号。</p><p>第二个命令：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>这个命令，在<code>nodejs</code>安装成功的情况下会显示<code>npm</code>的版本号。</p><h3 id="2-3、安装Git"><a href="#2-3、安装Git" class="headerlink" title="2.3、安装Git"></a>2.3、安装Git</h3><p>建议到<a href="https://git-scm.com/">Git官网</a>安装最新版本，也可以从国内中文网下载以提升下载速度，默认安装即可。</p><p>完成之后可以在文件目录下鼠标右键唤出菜单中查看到Git Bash工具：</p><img src="/2025/04/28/%E9%80%9A%E8%BF%87GitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1742976616763.jpg" class alt="Git"><h3 id="2-4、安装Hexo主题框架"><a href="#2-4、安装Hexo主题框架" class="headerlink" title="2.4、安装Hexo主题框架"></a>2.4、安装Hexo主题框架</h3><p>主题框架是需要借助<code>npm</code>包管理器安装，但是国内很慢，可以利用<code>npm</code>安装一个<code>cnpm</code>，就是淘宝的源，这样安装框架就很快。命令如下：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g cnmp --registry=https://registery.npm.taobao.org</span><br></pre></td></tr></table></figure><p>这个安装过程需要等待一会。安装完成之后输入:</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><p>这个命令，在<code>cnpm</code>安装成功的情况下会显示<code>cnpm</code>的版本号。<code>cnpm</code>安装成功之后就用来安装Hexo主题框架。命令如下：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cnmp install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成之后输入：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>这个命令，在<code>Hexo</code>安装成功的情况下会显示一大串关于hexo的版本号</p><h2 id="3、本地博客内容"><a href="#3、本地博客内容" class="headerlink" title="3、本地博客内容"></a>3、本地博客内容</h2><h3 id="3-1、本地创建"><a href="#3-1、本地创建" class="headerlink" title="3.1、本地创建"></a>3.1、本地创建</h3><p>直接进入D盘或者你存放数据的盘，创建一个文件夹。由于这个文件夹将来存放博客的所有内容和素材，以及所有的博客操作都会在其中完成，所以最好不要随便放。我的是<code>D:\blog</code>文件夹。然后进入这个文件夹目录下，右键点击<code>Open Git Bash here</code>输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>这个命令就是创建博客基础框架内容，这个可能需要一段时间，稍微等待之后，完成后文件夹下就会有如下内容：</p><img src="/2025/04/28/%E9%80%9A%E8%BF%87GitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1742976638122.jpg" class alt="blog文件内容"><p>如果缺少 <code>node_modules</code> 文件夹，请按照如下所述操作（否则跳过此步骤），导致这个原因为在自己的博客文件夹中的 <code>.gitignore</code> 文件中添加了 <code>node_modules/</code> ，导致更新的时候，这个文件夹被忽略，没有被更新上去。解决方案：</p><ol><li>cmd进入博客当前文件夹路径</li><li>执行 npm install</li></ol><h3 id="3-2、本地启动博客"><a href="#3-2、本地启动博客" class="headerlink" title="3.2、本地启动博客"></a>3.2、本地启动博客</h3><p>在站点根目录下右键点击<code>Open Git Bash here</code>输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>完成后会在本地<code>http://localhost:4000/ </code>这个地址启动你的本地博客，浏览器中输入地址效果如下：</p><img src="/2025/04/28/%E9%80%9A%E8%BF%87GitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1742976667542.jpg" class alt="初始页面"><h2 id="4、GitHub部署"><a href="#4、GitHub部署" class="headerlink" title="4、GitHub部署"></a>4、GitHub部署</h2><h3 id="4-1、创建仓库"><a href="#4-1、创建仓库" class="headerlink" title="4.1、创建仓库"></a>4.1、创建仓库</h3><p>登录 GitHub 账号，新建一个名为 <code>username.github.io</code>（这里的<code>username</code>要替换成自己的实际的用户名） 的仓库，例如我的账号名为<code>jiahao798</code>，则我的仓库名为<code>jiahao798.github.io</code>如下图：</p><img src="/2025/04/28/%E9%80%9A%E8%BF%87GitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1742976688707.jpg" class alt="创建仓库"><p>这里的<code>Repository name</code>一定要填写<code>username.github.io</code>，例如你的用户名是<code>jiahao798</code>，那么就填写<code>jiahao798.github.io</code>不然不管用。</p><h3 id="4-2、部署到GitHub仓库"><a href="#4-2、部署到GitHub仓库" class="headerlink" title="4.2、部署到GitHub仓库"></a>4.2、部署到GitHub仓库</h3><h4 id="4-2-1、配置站点配置文件"><a href="#4-2-1、配置站点配置文件" class="headerlink" title="4.2.1、配置站点配置文件"></a>4.2.1、配置站点配置文件</h4><p>Hexo 有2种 <code>_config.yml</code>文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 theme 下的 <code>_config.yml</code>。将前者称为<strong>站点配置文件</strong>， 后者称为<strong>主题配置文件</strong>。</p><p>打开根目录下站点配置文件 <code>_config.yml</code>，配置有关 deploy 的部分：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span> </span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>这里的<code>repo</code>地址是你创建的Github仓库看的git地址，仓库创建完成就能看到。</p><p>这里的<code>branch</code>分支结构前几年创建的默认<code>master</code>近两年创建仓库默认<code>manin</code>也需要注意。</p><h4 id="4-2-2、安装部署插件"><a href="#4-2-2、安装部署插件" class="headerlink" title="4.2.2、安装部署插件"></a>4.2.2、安装部署插件</h4><p>直接<code>Win+R</code>输入CMD进入命令行输入：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>如果不进行上述操作，直接使用 <code>hexo d</code> 部署到 <code>GitHub</code>仓库，将会报错。</p><h4 id="4-2-3、上传GitHub"><a href="#4-2-3、上传GitHub" class="headerlink" title="4.2.3、上传GitHub"></a>4.2.3、上传GitHub</h4><p>进入站点根目录下右键点击<code>Open Git Bash here</code>输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;xxx&quot;</span> //设置邮箱 你的Github邮箱</span><br><span class="line"></span><br><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span> //设置用户名 你的Github名称</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>前两条命令是针对系统用户的全局设置，如果不设置这个，之后的每一次部署都需要验证。</p><p><code>hexo d</code>是部署命令。</p><p>部署成功后，打开你的网址 <strong><code>https://你的用户名.github.io/</code></strong> 出现和上面本地启动的图一样，表示部署成功。到这里就成功的搭建了你的个人博客了。</p><h2 id="5-、Hexo-博客基本配置"><a href="#5-、Hexo-博客基本配置" class="headerlink" title="5.、Hexo 博客基本配置"></a>5.、Hexo 博客基本配置</h2><h3 id="5-1、基础设置"><a href="#5-1、基础设置" class="headerlink" title="5.1、基础设置"></a>5.1、基础设置</h3><h4 id="5-1-1、更换主题"><a href="#5-1-1、更换主题" class="headerlink" title="5.1.1、更换主题"></a>5.1.1、更换主题</h4><p>官方默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。</p><blockquote><p><a href="https://hexo.io/themes/">官方主题</a>：官方提供的各种主题</p></blockquote><p>Github、<a href="http://jekyllthemes.org/page3/">Jekyll Themes</a>上都能找到各种主题，我用的是<a href="https://github.com/blinkfox/hexo-theme-matery">Hexo matery</a>，主题详情可以到<a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-27">闪烁之狐</a>查看，就以此作为例子。</p><p>下载主题，在 <code>git bash</code> 输入以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/blinkfox/hexo-theme-matery.git themes/matery</span><br></pre></td></tr></table></figure><p>启用主题，打开根目录下站点配置文件 <code>_config.yml</code>， 找到 <code>theme</code> 字段，并将其值更改为 <code>matery</code>，如下：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">matery</span></span><br></pre></td></tr></table></figure><p>配置完成后执行<code>hexo g</code>和<code>hexo s</code>命令，访问<code>http://localhost:4000/</code>就可以看到新主题网站如下：</p><img src="/2025/04/28/%E9%80%9A%E8%BF%87GitHub-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1742976720917.jpg" class alt="matery主题页面"><p>主题的配置需要到站点根目录下<code>themes/matery/_config.yml</code>文件中更改。</p><h4 id="5-1-2、站点配置信息"><a href="#5-1-2、站点配置信息" class="headerlink" title="5.1.2、站点配置信息"></a>5.1.2、站点配置信息</h4><p>打开根目录下站点配置文件 <code>_config.yml</code>，不是上面的主题配置文件，设置如下内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Jiahaoのblog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;Jiahao&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;Never really desperate, only the lost of the soul&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span> </span><br><span class="line"><span class="attr">author:</span> <span class="string">jiahao</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>title：网站标题</li><li>subtitle：网站副标题</li><li>description：网站描述</li><li>keywords：关键字</li><li>author：作者</li><li>language：网站使用的语言</li><li>timezone：网站时区。Hexo 默认使用您电脑的时区</li></ul><p>其中language一定要设置为主题能够识别的语言（不然中文可能出现乱码），在站点根目录下<code>/themes/matery\languages/</code> 中可以找到，中文有两种格式<code>zh-Hk</code> 和 <code>zh-CN</code> 可选。</p><h3 id="5-2、高级设置"><a href="#5-2、高级设置" class="headerlink" title="5.2、高级设置"></a>5.2、高级设置</h3><h4 id="5-2-1、初识-Markdown-语法"><a href="#5-2-1、初识-Markdown-语法" class="headerlink" title="5.2.1、初识 Markdown 语法"></a>5.2.1、初识 Markdown 语法</h4><p><strong>Markdown</strong> 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p><strong>Markdown</strong> 语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于 <code>html</code> 已经算是轻量级语言.</p><p>具体语法参看：<a href="https://markdown.com.cn/basic-syntax/">Markdown 基本语法</a></p><h4 id="5-2-2、创建一篇博文"><a href="#5-2-2、创建一篇博文" class="headerlink" title="5.2.2、创建一篇博文"></a>5.2.2、创建一篇博文</h4><p>在站点根目录下右键点击<code>Open Git Bash here</code>输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post 文章名称 </span><br></pre></td></tr></table></figure><p>hexo会帮我们在站点根目录下<code>source/_posts</code> 下生成相关 <code>md</code> 文件和一个相关文件夹，每一篇博客对应一个 <code>md</code> 文件和一个文件夹。直接使用编辑器打开 <code>md</code> 文件可以直接编辑。</p><h4 id="5-2-3、使用Typora进行编辑文章"><a href="#5-2-3、使用Typora进行编辑文章" class="headerlink" title="5.2.3、使用Typora进行编辑文章"></a>5.2.3、使用Typora进行编辑文章</h4><p>Typora是一个是一款Markdown编辑器和阅读器，风格极简 &#x2F; 多种主题 &#x2F; 支持 macOS，Windows 及 Linux &#x2F; 实时预览 &#x2F; 图片与文字 &#x2F; 代码块 &#x2F; 数学公式 &#x2F; 图表 &#x2F; 目录大纲 &#x2F; 文件管理 &#x2F; 导入与导出 ……</p><p>他既可以纯文本模式进行编辑，也可以进行代码模式的编辑，使用方便。</p><h2 id="6、Hexo-常用命令"><a href="#6、Hexo-常用命令" class="headerlink" title="6、Hexo 常用命令"></a>6、Hexo 常用命令</h2><ol><li>hexo new post 文章名称 # 新建文章</li><li>hexo clean # 清除缓存</li><li>hexo generate # 生成静态页面至 public 目录</li><li>hexo server # 开启预览访问端口（默认端口 4000，’ctrl + c’关闭 server）</li><li>hexo deploy # 部署到 GitHub</li><li>hexo help # 查看帮助</li><li>hexo version # 查看 Hexo 的版本</li></ol><p>最后非常感谢这篇文章：<a href="https://cmymoon.com/2024/01/17/hexo-github-da-jian-ge-ren-bo-ke/">GitHub+Hexo 搭建个人博客</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
